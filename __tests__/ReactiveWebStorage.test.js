import { faker } from './helpers/index.js'
import { ReactiveWebStorageFactory } from '../src/storage/ReactiveWebStorageFactory.js'
import { ReactiveWebStorageError } from '../src/storage/Error.js'
import { ref, reactive, isRef, isReactive } from 'vue'

const { localStorage } = window
const filePath = 'src/storage/ReactiveWebStorageFactory.js'

const getReactiveWebStorageInstance = (
  webStorage,
  reactiveStorage,
  prefix = '',
) => {
  return ReactiveWebStorageFactory.createReactiveWebStorage(
    prefix,
    webStorage,
    reactiveStorage,
  )
}

const createArrayTestWithObjects = (nElement) => {
  const array = []
  for (let i = 0; i < nElement; i++) {
    const element = {
      key: faker.string.sample(),
      value: faker.string.sample(),
    }
    array.push(element)
  }
  return array
}

const addItemsInReactiveWebStorage = (elements, reactiveWebStorage) => {
  elements.forEach((element) => {
    const { key, value } = element
    reactiveWebStorage.setItem(key, value)
  })
}

const getReactiveStorageInstance = (reactiveWebStorage) => {
  const reactiveStorage = reactiveWebStorage.reactiveStorage
  return isRef(reactiveStorage) ? reactiveStorage.value : reactiveStorage
}

describe(`class ReactiveWebStorage (${filePath})`, () => {
  describe('constructor', () => {
    it('Should create a ReactiveWebStorage object when the constructor is called using Storage and vue Ref instances', () => {
      // Arrange
      const refStorage = ref({})

      // Act
      const result = () =>
        getReactiveWebStorageInstance(localStorage, refStorage)

      // Assert
      expect(result).not.toThrow()
    })
    it('Should throw a ReactiveWebStorageError when the constructor is called using vue Ref instance but not a Storage instance', () => {
      // Arrange
      const refStorage = ref({})
      const notStorage = faker.string.sample(100)
      const expected = ReactiveWebStorageError

      // Act
      const result = () => getReactiveWebStorageInstance(notStorage, refStorage)

      // Assert
      expect(result).toThrow(expected)
    })
    it('Should create a ReactiveWebStorage object when the constructor is called using Storage and vue Reactive instances', () => {
      // Arrange
      const reactiveStorage = reactive({})

      // Act
      const result = () =>
        getReactiveWebStorageInstance(localStorage, reactiveStorage)

      // Assert
      expect(result).not.toThrow()
    })
    it('Should throw a ReactiveWebStorageError when the constructor is called using vue Reactive instance but not a Storage instance', () => {
      // Arrange
      const reactiveStorage = reactive({})
      const notStorage = faker.number.int()
      const expected = ReactiveWebStorageError

      // Act
      const result = () =>
        getReactiveWebStorageInstance(notStorage, reactiveStorage)

      // Assert
      expect(result).toThrow(expected)
    })
    it('Should throw a ReactiveWebStorageError when the constructor is called using a Storage instance but not a vue Ref/Reactive instance', () => {
      // Arrange
      const notVueReactiveStorage = [1, 2, 3, 4, 5, 6, 7]
      const expected = ReactiveWebStorageError

      // Act
      const result = () =>
        getReactiveWebStorageInstance(localStorage, notVueReactiveStorage)

      // Assert
      expect(result).toThrow(expected)
    })
  })
  describe('test an instance generated by constructor with parameters (Storage, vue Ref)', () => {
    let reactiveWebStorage

    beforeEach(() => {
      const refStorage = ref({})
      reactiveWebStorage = getReactiveWebStorageInstance(
        localStorage,
        refStorage,
      )
    })
    afterEach(() => {
      localStorage.clear()
    })

    describe('(getter) length', () => {
      it('Should return 0 when reactiveWebStorage is empty', () => {
        // Arrange
        const expected = 0

        // Act
        const reactiveWebStorageResult = reactiveWebStorage.length
        const localStorageResult = localStorage.length

        // Assert
        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
      it('Should return 3 when reactiveWebStorage contain 3 elements', () => {
        // Arrange
        const expected = 3
        const data = createArrayTestWithObjects(expected)
        addItemsInReactiveWebStorage(data, reactiveWebStorage)

        // Act
        const reactiveWebStorageResult = reactiveWebStorage.length
        const localStorageResult = localStorage.length

        // Assert
        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
    })
    describe('(getter) reactiveStorage', () => {
      it('Should return the vue ref instance used', () => {
        // Arrange
        const expected = true

        // Act
        const result = isRef(reactiveWebStorage.reactiveStorage)

        // Assert
        expect(result).toBe(expected)
      })
    })
    describe('(method) key', () => {
      it('Should return null when the key not exists into reactiveWebStorage', () => {
        // Arrange
        const index = 0

        // Act
        const result = reactiveWebStorage.key(index)

        // Assert
        expect(result).toBeNull()
      })
      it('Should return the key in fourth position into reactiveWebStorage', () => {
        // Arrange
        const index = 3
        const nData = 4
        const data = createArrayTestWithObjects(nData)
        const expected = data[index].key
        addItemsInReactiveWebStorage(data, reactiveWebStorage)

        // Act
        const result = reactiveWebStorage.key(index)

        // Assert
        expect(result).toBe(expected)
      })
    })
    describe('(method) setItem', () => {
      it('Should add a value', () => {
        // Arrange
        const key = faker.string.sample(20)
        const expected = faker.string.sample(200)

        // Act
        reactiveWebStorage.setItem(key, expected)

        // Assert
        const reactiveStorage = getReactiveStorageInstance(reactiveWebStorage)
        const reactiveWebStorageResult = reactiveStorage[key]
        const localStorageResult = localStorage.getItem(key)

        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
      it('Should override a value saved in reactiveWebStorage when add a new value using the same key', () => {
        // Arrange
        const key = faker.string.sample(50)
        const initValue = faker.internet.userName()
        const expected = faker.string.sample(50)

        reactiveWebStorage.setItem(key, initValue)

        // Act
        reactiveWebStorage.setItem(key, expected)

        // Assert
        const reactiveStorage = getReactiveStorageInstance(reactiveWebStorage)
        const reactiveWebStorageResult = reactiveStorage[key]
        const localStorageResult = localStorage.getItem(key)

        expect(reactiveWebStorageResult).toEqual(expected)
        expect(localStorageResult).toEqual(expected)
      })
    })
    describe('(method) getItem', () => {
      it('Should return null when the key not exists into reactiveWebStorage nor into WebStorage', () => {
        // Arrange
        const key = faker.string.sample(17)

        // Act
        const result = reactiveWebStorage.getItem(key)

        // Assert
        expect(result).toBeNull()
      })
      describe('when the key exists in reactiveWebStorage', () => {
        it('Should return a value', () => {
          // Arrange
          const key = faker.string.sample(15)
          const expected = faker.string.sample(50)

          reactiveWebStorage.setItem(key, expected)

          // Act
          const reactiveWebStorageResult = reactiveWebStorage.getItem(key)

          // Assert
          const localStorageResult = localStorage.getItem(key)

          expect(reactiveWebStorageResult).toBe(expected)
          expect(localStorageResult).toBe(expected)
        })
      })
      describe('when the key not exists in reactiveWebStorage, but exists into localStorage', () => {
        it('Should return a value', () => {
          // Arrange
          const key = faker.string.sample(27)
          const expected = faker.string.sample(12)

          localStorage.setItem(key, expected)

          // Act
          const result = reactiveWebStorage.getItem(key)

          // Assert
          expect(result).toBe(expected)
        })
      })
    })
    describe('(method) removeItem', () => {
      it('Should call this method inclusive if not exists the key into reactiveLocalStorage', () => {
        // Arrange
        const key = faker.string.symbol()

        // Act
        const result = () => reactiveWebStorage.removeItem(key)

        // Assert
        expect(result).not.toThrow()
      })
      it('Should remove a value', () => {
        // Arrange
        const key = faker.string.sample(32)
        const value = faker.string.sample(15)

        reactiveWebStorage.setItem(key, value)

        // Act
        reactiveWebStorage.removeItem(key)

        // Assert
        const reactiveStorage = getReactiveStorageInstance(reactiveWebStorage)
        const reactiveWebStorageResult = reactiveStorage[key]
        const localStorageResult = localStorage.getItem(key)

        expect(reactiveWebStorageResult).toBeUndefined()
        expect(localStorageResult).toBeNull()
      })
    })
    describe('(method) clear', () => {
      it('Should remove all element into ReactiveLocalStorage', () => {
        // Arrange
        const expected = 0
        const nElements = faker.number.int({
          max: 100,
        })
        const data = createArrayTestWithObjects(nElements)
        addItemsInReactiveWebStorage(data, reactiveWebStorage)

        // Act
        reactiveWebStorage.clear()

        // Assert
        const reactiveWebStorageResult = reactiveWebStorage.length
        const localStorageResult = localStorage.length

        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
    })
  })
  describe('test an instance generated by constructor with parameters (Storage, vue Reactive)', () => {
    let reactiveWebStorage

    beforeEach(() => {
      const reactiveStorage = reactive({})
      reactiveWebStorage = getReactiveWebStorageInstance(
        localStorage,
        reactiveStorage,
      )
    })
    afterEach(() => {
      localStorage.clear()
    })
    describe('(getter) length', () => {
      it('Should return 0 when reactiveWebStorage is empty', () => {
        // Arrange
        const expected = 0

        // Act
        const reactiveWebStorageResult = reactiveWebStorage.length
        const localStorageResult = localStorage.length

        // Assert
        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
      it('Should return 7 when reactiveWebStorage contain 7 elements', () => {
        // Arrange
        const expected = 7
        const data = createArrayTestWithObjects(expected)
        addItemsInReactiveWebStorage(data, reactiveWebStorage)

        // Act
        const reactiveWebStorageResult = reactiveWebStorage.length
        const localStorageResult = localStorage.length

        // Assert
        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
    })
    describe('(getter) reactiveStorage', () => {
      it('Should return the vue reactive instance used', () => {
        // Arrange
        const expected = true

        // Act
        const result = isReactive(reactiveWebStorage.reactiveStorage)

        // Assert
        expect(result).toBe(expected)
      })
    })
    describe('(method) key', () => {
      it('return null when the key not exists into reactiveWebStorage', () => {
        // Arrange
        const index = 7

        // Act
        const result = reactiveWebStorage.key(index)

        // Assert
        expect(result).toBeNull()
      })
      it('return the key in fifth position into reactiveWebStorage', () => {
        // Arrange
        const index = 4
        const nData = faker.number.int({ max: 100 })
        const data = createArrayTestWithObjects(nData)
        const expected = data[index].key
        addItemsInReactiveWebStorage(data, reactiveWebStorage)

        // Act
        const result = reactiveWebStorage.key(index)

        // Assert
        expect(result).toBe(expected)
      })
    })
    describe('(method) setItem', () => {
      it('Should add a value', () => {
        // Arrange
        const key = faker.string.sample(47)
        const expected = faker.string.sample(12)

        // Act
        reactiveWebStorage.setItem(key, expected)

        // Assert
        const reactiveStorage = getReactiveStorageInstance(reactiveWebStorage)
        const reactiveWebStorageResult = reactiveStorage[key]
        const localStorageResult = localStorage.getItem(key)

        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
      it('Should override a value saved in reactiveWebStorage when add a new value using the same key', () => {
        // Arrange
        const key = faker.string.sample(45)
        const initValue = faker.string.sample(14)
        const expected = faker.string.sample(10)

        reactiveWebStorage.setItem(key, initValue)

        // Act
        reactiveWebStorage.setItem(key, expected)

        // Assert
        const reactiveStorage = getReactiveStorageInstance(reactiveWebStorage)
        const reactiveWebStorageResult = reactiveStorage[key]
        const localStorageResult = localStorage.getItem(key)

        expect(reactiveWebStorageResult).toEqual(expected)
        expect(localStorageResult).toEqual(expected)
      })
    })
    describe('(method) getItem', () => {
      it('Should return null when the key not exists into reactiveWebStorage nor into localStorage', () => {
        // Arrange
        const key = faker.string.sample(50)

        // Act
        const result = reactiveWebStorage.getItem(key)

        // Assert
        expect(result).toBeNull()
      })
      describe('when the key exists in reactiveWebStorage', () => {
        it('Should return a primitive value', () => {
          // Arrange
          const key = faker.string.sample(79)
          const expected = faker.string.sample(12)

          reactiveWebStorage.setItem(key, expected)

          // Act
          const reactiveWebStorageResult = reactiveWebStorage.getItem(key)

          // Assert
          const localStorageResult = localStorage.getItem(key)

          expect(reactiveWebStorageResult).toBe(expected)
          expect(localStorageResult).toBe(expected)
        })
      })
      describe('when the key not exists in reactiveWebStorage, but exists into localStorage', () => {
        it('Should return a value', () => {
          // Arrange
          const key = faker.string.sample(79)
          const expected = faker.string.sample(100)

          localStorage.setItem(key, expected)

          // Act
          const result = reactiveWebStorage.getItem(key)

          // Assert
          expect(result).toBe(expected)
        })
      })
    })
    describe('(method) removeItem', () => {
      it('Should call this method inclusive if not exists the key into reactiveWebStorage', () => {
        // Arrange
        const key = faker.string.sample(70)

        // Act
        const result = () => reactiveWebStorage.removeItem(key)

        // Assert
        expect(result).not.toThrow()
      })
      it('Should remove a value', () => {
        // Arrange
        const key = faker.string.sample(100)
        const value = faker.string.sample()

        reactiveWebStorage.setItem(key, value)

        // Act
        reactiveWebStorage.removeItem(key)

        // Assert
        const reactiveStorage = getReactiveStorageInstance(reactiveWebStorage)
        const reactiveWebStorageResult = reactiveStorage[key]
        const localStorageResult = localStorage.getItem(key)

        expect(reactiveWebStorageResult).toBeUndefined()
        expect(localStorageResult).toBeNull()
      })
    })
    describe('(method) clear', () => {
      it('Should remove all element into ReactiveWebStorage', () => {
        // Arrange
        const expected = 0
        const nElements = faker.number.int({ max: 100 })
        const data = createArrayTestWithObjects(nElements)
        addItemsInReactiveWebStorage(data, reactiveWebStorage)

        // Act
        reactiveWebStorage.clear()

        // Assert
        const reactiveWebStorageResult = reactiveWebStorage.length
        const localStorageResult = localStorage.length

        expect(reactiveWebStorageResult).toBe(expected)
        expect(localStorageResult).toBe(expected)
      })
    })
  })
})
